services:
  db:
    image: postgres:15
    shm_size: 1gb
    restart: on-failure:5
    env_file: .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - db_logs:/var/log/postgresql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U league" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
     context: ./backend
     dockerfile: Dockerfile.stage
    restart: on-failure:5
    command: bash -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn evsite.wsgi:application --bind 0.0.0.0:8000"
    env_file: .env
    volumes:
      - backend_staticfiles:/staticfiles
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: on-failure:5
    env_file: .env
    command: bash -c "npm install && npm run build"
    volumes:
      - frontend_dist:/code/dist

  nginx:
    image: nginx:1.27
    restart: on-failure:5
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/maintenance_mode.json:/etc/nginx/maintenance_mode.json:ro
      - ./nginx/certs:/usr/share/certs
      - frontend_dist:/usr/share/nginx/html
      - backend_staticfiles:/usr/share/nginx/static
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_completed_successfully
    entrypoint: sh -c "mkdir -p /usr/share/nginx/static && nginx -g 'daemon off;'"


volumes:
  backend_staticfiles:
  frontend_dist:
  db_data:
  db_logs:
  nginx_logs:
